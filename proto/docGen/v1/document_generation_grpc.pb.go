// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DocumentGenerationServicesClient is the client API for DocumentGenerationServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentGenerationServicesClient interface {
	TestService(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type documentGenerationServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentGenerationServicesClient(cc grpc.ClientConnInterface) DocumentGenerationServicesClient {
	return &documentGenerationServicesClient{cc}
}

func (c *documentGenerationServicesClient) TestService(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/docGen.DocumentGenerationServices/TestService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentGenerationServicesServer is the server API for DocumentGenerationServices service.
// All implementations must embed UnimplementedDocumentGenerationServicesServer
// for forward compatibility
type DocumentGenerationServicesServer interface {
	TestService(context.Context, *TestRequest) (*TestResponse, error)
	mustEmbedUnimplementedDocumentGenerationServicesServer()
}

// UnimplementedDocumentGenerationServicesServer must be embedded to have forward compatible implementations.
type UnimplementedDocumentGenerationServicesServer struct {
}

func (UnimplementedDocumentGenerationServicesServer) TestService(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestService not implemented")
}
func (UnimplementedDocumentGenerationServicesServer) mustEmbedUnimplementedDocumentGenerationServicesServer() {
}

// UnsafeDocumentGenerationServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentGenerationServicesServer will
// result in compilation errors.
type UnsafeDocumentGenerationServicesServer interface {
	mustEmbedUnimplementedDocumentGenerationServicesServer()
}

func RegisterDocumentGenerationServicesServer(s grpc.ServiceRegistrar, srv DocumentGenerationServicesServer) {
	s.RegisterService(&DocumentGenerationServices_ServiceDesc, srv)
}

func _DocumentGenerationServices_TestService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentGenerationServicesServer).TestService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docGen.DocumentGenerationServices/TestService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentGenerationServicesServer).TestService(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocumentGenerationServices_ServiceDesc is the grpc.ServiceDesc for DocumentGenerationServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocumentGenerationServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "docGen.DocumentGenerationServices",
	HandlerType: (*DocumentGenerationServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestService",
			Handler:    _DocumentGenerationServices_TestService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "docGen/v1/document_generation.proto",
}
